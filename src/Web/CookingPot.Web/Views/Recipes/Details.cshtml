@model CookingPot.Web.ViewModels.Recipes.DetailsRecipeViewModel

@{
    this.ViewData["Title"] = Model.Name;
}

@if (this.TempData["InfoMessage"] != null)
{
    <div id="tempData" class="alert alert-success">
        @this.TempData["InfoMessage"]
    </div>
}

<div class="jumbotron">
    <span><i class="fas fa-calendar"></i> @Model.CreatedOn.Day/@Model.CreatedOn.Month/@Model.CreatedOn.Year | <i class="fas fa-user"></i> @Model.ShortUsername</span>
    @if (Model.ModifiedOn.HasValue)
    {
        <span>| <i class="fas fa-edit"></i>@Model.ModifiedOn.Value</span>
    }
    <form id="votesForm" method="post"></form>
    <div class="float-right">
        <a href="#" onclick="sendVote(@Model.Id, true)">
            <i class="fa fa-thumbs-up"></i>
        </a>
        <span id="positiveVotes">@Model.PositiveVotes</span>
    </div>
    <br />
    <div class="float-right">
        <a href="#" onclick="sendVote(@Model.Id, false)">
            <i class="fa fa-thumbs-down"></i>
        </a>
        <span id="negativeVotes">@Model.NegativeVotes</span>
    </div>
    <h1 class="display-4">@Model.Name</h1>
    <img src="@Model.ImageUrl" alt="@Model.Name" width="500" />
    <p class="lead">@Model.Description</p>
    <hr class="my-4">
    <p>
        List of needed products:
        <ul>
            @foreach (var product in Model.RecipeProducts)
            {
                <li>@product.Name</li>
            }
        </ul>
    </p>
    <div>
        <button type="button" class="btn btn-primary" id="buttonCommentForm" onclick="showCommentBox()">Comment</button>
        @if (Model.CurrentUserId == Model.UserId)
        {
            <a class="btn btn-primary btn-lg float-right" href="/Recipes/EditRecipe?id=@Model.Id" role="button">Edit</a>
        }

    </div>
    <br />
    <div id="commentsSection">
        @if (Model.RecipeComments.Any())
        {
            @foreach (var comment in Model.RecipeComments)
            {
                <div>
                    <span><i class="fas fa-calendar"></i> @comment.CreatedOn.Day/@comment.CreatedOn.Month/@comment.CreatedOn.Year | <i class="fas fa-user"></i> @comment.UserUserName</span>
                    <br />
                    <p>@comment.Content</p>
                    <hr />
                </div>
            }
        }
    </div>
</div>

<form id="commentForm" method="post" style="display: none">
    <div class="form-group">
        <label>Your comment:</label>
        <textarea rows="5" class="form-control" name="Comment" placeholder="Please, type your comment"></textarea>
    </div>
    <a href="#" class="btn btn-secondary" onclick="postComment(@Model.Id, '@Model.CurrentUserId')">Add comment</a>
</form>


@section Scripts {
    <script>
        // Show comment form
        function showCommentBox() {
            $('#commentForm').show();
            $([document.documentElement, document.body]).animate({
                scrollTop: $("#commentForm").offset().top
            }, 2000);
        }
        // Post comment ajax
        function postComment(recipeId, currentUserId) {
            var token = $("#commentForm input[name=__RequestVerificationToken]").val();
            var comment = $("#commentForm div.form-group textarea").val();
            var json = { recipeId: recipeId, currentUserId: currentUserId, comment: comment };

            $.ajax({
                url: "/api/comments",
                method: "POST",
                data: JSON.stringify(json),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                headers: { 'X-CSRF-TOKEN': token },
                success: function (data) {
                    let div = document.createElement('div');
                    let span = document.createElement('span');
                    span.textContent = data.createdOn + ' | ' + data.userUserName;
                    let firstI = document.createElement('i');
                    firstI.setAttribute('class', 'fas fa-calendar');
                    let secondI = document.createElement('i');
                    secondI.setAttribute('class', 'fas fa-user');
                    let br = document.createElement('br');
                    let p = document.createElement('p');
                    p.textContent = data.content;
                    let hr = document.createElement('hr');
                    div.appendChild(span);
                    div.appendChild(br);
                    div.appendChild(p);
                    div.appendChild(hr);
                    document.getElementById('commentsSection').appendChild(div);
                    document.querySelector('#commentForm div.form-group textarea').value = '';
                }
                    
            });
        }

        $(document).ready(function () {
            setTimeout(function () {
                $('#tempData').hide();
            }, 3000);
        });

        function sendVote(recipeId, isUpVote) {
            var token = $("#votesForm input[name=__RequestVerificationToken]").val();
            var json = { recipeId: recipeId, isUpVote: isUpVote };
            $.ajax({
                url: "/api/votes",
                method: "POST",
                data: JSON.stringify(json),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                headers: { 'X-CSRF-TOKEN': token },
                success: function (data) {
                    document.getElementById('positiveVotes').innerHTML = data.positiveVotes;
                    document.getElementById('negativeVotes').innerHTML = data.negativeVotes;
                }
            });
        }

    </script>
}
